# ----------------------------------------------------------------------#
# KERnano                                                               #
# The No-Install Python Pen Testing Kit                                 #                              #
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  #
# Copyright: exeCODEable, 2022                                          #
# Author: Ash Noor (ryn0f1sh.blog)                                      #
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  #
# This tool is for educational purposes.                                #
# We do not condone using this tool for any illegal activity.           #
# Make sure you have permission before Pen Testing any entity.          #
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  #
# Thank you for the support.                                            #
# Happy Hacking & Code The Planet                                       #
# www.exeCODEable.com  |  www.AshNoor.me  |  www.KERnano.com            #
#-----------------------------------------------------------------------#

# Imports

import base64


# Pentest Tool Package:
import Pentest_Tools.ptt_main


# Kernano Package:
# Error Handling - The Int Checker
import Kernano_Package.Error_Handler
# The Kernanon Menu & Exit Kernano functions
import Kernano_Package.kp_main


#-- To ENCODE what is typed into Standard Base64
def nkoder():
    awords = input("Enter your sentence: ")
    awords_bytes = awords.encode('ascii')
    theEncoded = base64.standard_b64encode(awords_bytes)
    print(theEncoded.decode("utf-8"))
    internal_loop()


#-- To DECODE what is typed into standard English
def dkoder():
    bwords = input("Paste your Base64: ")
    theDecoded = base64.standard_b64decode(bwords)
    print(theDecoded.decode("utf-8"))
    internal_loop()




#-- Internal Loop Function
def internal_loop():
    loop_answer = input("\nBack to the B64's Menu? [y/n] : ")
    if loop_answer.lower()== 'y':
        b64_menu()
    else:
        # Go back to Pentest Tool menu
        Pentest_Tools.ptt_main.ptt_menu()






# ------------------------------------------------------------
# The B64 Menu
def b64_menu():
    print("""
+-+-+-+-+-+-+
| B64 Menu |
+-+-+-+-+-+-+
----------------------------------------------
| To help you Encode / Decode standard Base64 |
-----------------------------------------------""")
    print("""
[1] : Encode.
[2] : Decode.
[3] : Back to Pen Testing Tools.
[4] : Back to KERnano Menu.
    """)
    # Getting user input
    menu_answer = input("What is your option?: ")

    # Send to The Checker for Error Handling
    # Re-assign the User's input with the value returned from The Checker
    menu_answer = Kernano_Package.Error_Handler.the_int_checker(menu_answer)

    if int(menu_answer) == 1:
        # The encode function.
        nkoder()
    elif int(menu_answer) == 2:
        # The decode function.
        dkoder()
    elif int(menu_answer) == 3:
        # Go back to Pentest Tool menu
        Pentest_Tools.ptt_main.ptt_menu()

        # If User Input is rejected by the Error Handler
    elif menu_answer == -1:
        # Go back to the Tool Menu ()
        b64_menu()
        # If User Input is rejected by the Error Handler
    elif menu_answer == -2:
        # Go back to the Tool Menu ()
        b64_menu()

    else:
        # Go back to Kernano's Main Menu
        Kernano_Package.kp_main.kernano_menu()

# End of The B64 Menu Function.
# ------------------------------------------------------------









'''------------------
CALLING THE FUNCTIONS
----------------------'''
#-- Using a Main Guard to prevent it from running when Imported.
if __name__ == '__main__':
    b64_menu() # The B64 Menu

