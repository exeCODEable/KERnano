# ----------------------------------------------------------------------#
# KERnano                                                               #
# The No-Install Python Pen Testing Kit                                 #
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  #
# Copyright: exeCODEable, 2022                                          #
# Author: Ash Noor (ryn0f1sh.blog)                                      #
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  #
# This tool is for educational purposes.                                #
# We do not condone using this tool for any illegal activity.           #
# Make sure you have permission before Pen Testing any entity.          #
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  #
# Thank you for the support.                                            #
# Happy Hacking & Code The Planet                                       #
# www.exeCODEable.com  |  www.AshNoor.me  |  www.KERnano.com            #
#-----------------------------------------------------------------------#


# Imports
import urllib.request
import urllib.error
from time import sleep

# Pentest Tool Package:
import Pentest_Tools.ptt_main


# Kernano Package:
# Error Handling - The Int Checker
import Kernano_Package.Error_Handler
# The Kernanon Menu & Exit Kernano functions
import Kernano_Package.kp_main


# Checking a Single Site.
# Checking a txt file of Sites.
# Creates 2 lists to store the Up Sites.
# Append the lists as it goes through the file.
# At the end, it will give you 2 text files:
#      One file for the SSL sites.
#      One file for the HTTP-Only sites.

# Global Variables
# Create a list to hold SSL sites.
ssl_sites = []

# Create a list to hold HTTP only sites.
http_sites = []





# ------------------------------------------------------------
# The URL Menu Function
def url_menu():
    print("""
+-+-+-+-+-+-+-+-+-+-+-+-
| The URL Checker Menu |
+-+-+-+-+-+-+-+-+-+-+-+-""")
    print("""  
[1] Check a single URL.
[2] Read URLs from a text file.
[3] Back to Pen Testing Tools.
[4] Back to KERnano Menu.      
    """)

    # User Input
    ui_menu = input("Choose an option: ")

    # To Error Check the user's input
    # Re-assign the outcome back to ui_menu
    ui_menu = Kernano_Package.Error_Handler.the_int_checker(ui_menu)

    # Determine the choice made.
    if int(ui_menu) == 1:
        # Single URL Check
        url_single()
    elif int(ui_menu) == 2:
        # Test file of URLS
        url_file()
    elif int(ui_menu) == 3:
        # Go back to Pentest Tool menu
        Pentest_Tools.ptt_main.ptt_menu()

        # If User Input is rejected by the Error Handler
    elif ui_menu == -1:
        # Back to URL Menu
        url_menu()
    elif ui_menu == -2:
        # Back to URL Menu
        url_menu()

    else:
        # Go back to Kernano's Main Menu
        Kernano_Package.kp_main.kernano_menu()

# End of URL Menu Function.
# ------------------------------------------------------------





# ------------------------------------------------------------
#  A Single URL check
def url_single():
    # User input. Get the URL.
    ui_url = input("\nPlease Enter the URL - https://")

    #  Adding https:// in front of url
    url = ('https://' + ui_url)

    # Message for the user
    print("Checking: "+ str(url))
    sleep(1)


    # Return a response
    # Try / Except to check the Status of the site.
    try:
        # Go to the URL and get the Status Code.
        status_code = urllib.request.urlopen(url, timeout=5).getcode()

        # Check if the code is 200
        if status_code == 200:
            print(str(url) + " - Status: UP\n")
            sleep(1)
            mini_menu()
    except urllib.error.HTTPError as exception:  # Deals with 404 codes
        print(str(url) + " - Status: DOWN\n")
        sleep(1)
        mini_menu()
    except Exception as e:  # Deals with the timeout error.
        print(str(url) + " - Timeout Error - possibly not an HTTPS site.\n")

        # Replace 'https' with 'http'
        no_ssl = url.replace('https', 'http')

        # Calling the Non SSL Site checker
        # Reassigning the variable
        no_ssl = no_ssl_url(no_ssl)
        print(no_ssl)

        sleep(2)

        # Mini Menu
        mini_menu()

# End of Single URL Function.
# ------------------------------------------------------------







# ------------------------------------------------------------
# URL Text File Function
def url_file():
    # User Input. Get the name of the file.
    ui_filename = input("Enter the file name - example: myFile.txt: ")

    # Go through the file to add 'https://'
    with open(ui_filename, 'r') as q:
        for items in q:
            url = ('https://'+items)

            # Try / Except to read through the file, and check status.
            try:
                # Go to the URL and get the Status Code.
                status_code = urllib.request.urlopen(url, timeout=5).getcode()

                # Check if the code is 200
                if status_code == 200:
                    print(str(url)+"Status: UP.\n")
                    # Append the SSL list
                    ssl_sites.append(url.replace('\n', ''))
                    continue
            except urllib.error.HTTPError as exception: # Deals with 404 codes
                print(str(url)+"Status: DOWN.\n")
                continue
                q.close()
            except Exception as e: # Deals with the timeout error.
                print(str(url)+"Status: Timeout Error - possibly not an HTTPS site.\n")

                # Replace 'https' with 'http'
                no_ssl = url.replace('https', 'http')
                # variable to hold the new URL
                new_url = no_ssl

                # Calling the Non SSL Site checker
                # Reassigning the variable
                no_ssl = no_ssl_url(no_ssl)

                # If no_ssl_url returns "Status UP"
                no_ssl_status = " - Status: UP: (http) Only\n"
                if no_ssl_status in no_ssl:
                    print(str(no_ssl) + "Status: UP.\n")
                    # Append the HTTP list
                    http_sites.append(new_url.replace('\n', ''))
                else:
                    # Just print it.
                    print(no_ssl)
                continue

                # Mini Menu
                mini_menu()

                # Close the file
                q.close()

        # Display number of UP sites
        num_of_sites = len(ssl_sites + http_sites)
        print("Number of Live Sites: " + str(num_of_sites))
        print("Number of SSL Enabled Sites: " + str(len(ssl_sites)))
        print("Number of HTTP Only Sites: " + str(len(http_sites)))

        # Call the File Function
        theFile()

# End of URL Text File Menu Function.
# ------------------------------------------------------------





# ------------------------------------------------------------
# No SSL URL Function
# // Runs the check on 'http' and returns the result
def no_ssl_url(no_ssl):
    print("Checking the site as a Non SSL (http) site")
    sleep(1)
    print("Checking: "+no_ssl)

    # Return a response
    # Try / Except to check the Status of the site.
    try:
        # Go to the URL and get the Status Code.
        status_code = urllib.request.urlopen(no_ssl, timeout=5).getcode()

        # Check if the code is 200
        if status_code == 200:
            return (str(no_ssl) + " - Status: UP: (http) Only\n")

    except urllib.error.HTTPError as exception:  # Deals with 404 codes
        return(str(no_ssl) + " - Status: Still DOWN  - failed (http) & (https).\n")

    except Exception as e:  # Deals with the timeout error.
        return(str(no_ssl) + " - Another Timeout Error - failed (http) & (https).\n")

# End of No SSL URL Function.
# ------------------------------------------------------------







# ------------------------------------------------------------
# This is to write the output to a text file
# The File Function.
def theFile():
    # Open & append the SSL text file.
    print("\n-- Creating Your SSL Text File --")
    sleep(3)
    with open("001_SSL_Sites.txt", 'a') as f:
        for x in range(len(ssl_sites)):
            print(ssl_sites[x], file=f)
    # Close file
    f.close()
    sleep(2)

    # Open & append the HTTP text file.
    print("\n-- Creating Your HTTP Only Text File --")
    sleep(3)
    with open("002_HTTP-Only_Sites.txt", 'a') as f:
        for x in range(len(http_sites)):
            print(http_sites[x], file=f)
    # Close file
    f.close()
    sleep(2)

    # Call the Mini Menu
    mini_menu()

# End of The File Function.
# ------------------------------------------------------------





# // Mini Menu Function
def mini_menu():
    print("""
Mini Menu
---------
[1] URL Checker Menu.
[2] Pen Testing Tool. 
[3] KERnano Menu.
[4] Exit KERnano.
    """)

    # User Input. Choice
    ui_mini = input("\nYour Choice: ")

    # To Error Check the user's input
    # Re-assign the outcome back to ui_menu
    ui_mini = Kernano_Package.Error_Handler.the_int_checker(ui_mini)

    # Determine the choice made
    if int(ui_mini) == 1:
        # URL Menu
        url_menu()
    if int(ui_mini) == 2:
        # Go back to Pentest Tool menu
        Pentest_Tools.ptt_main.ptt_menu()
    if int(ui_mini) == 3:
        # Go back to Kernano's Main Menu
        Kernano_Package.kp_main.kernano_menu()

        # If User Input is rejected by the Error Handler
    elif ui_mini == -1:
        # Go back to Mini Menu
        mini_menu()
        # If User Input is rejected by the Error Handler
    elif ui_mini == -2:
        # Go back to Mini Menu
        mini_menu()

    else:
        # Exit KERnano
        Kernano_Package.kp_main.exit_kernano()
# /// End of the Mini Menu Function










# Calling the title function with a main guard
if __name__ == "__main__":
    url_menu() # The URL Menu