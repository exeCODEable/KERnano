# ----------------------------------------------------------------------#
# KERnano                                                               #
# The No-Install Python Pen Testing Kit                                 #
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  #
# A special 'Thank You' to Mr. David Bombal for sharing his inspiration.#
# His code was referenced for this tool.                                #
# His Site: https://www.davidbombal.com                                 #
# His YouTube Channel: https://www.youtube.com/davidbombal              #
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  #
# Copyright: exeCODEable, 2022                                          #
# Author: Ash Noor (ryn0f1sh.blog)                                      #
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  #
# This tool is for educational purposes.                                #
# We do not condone using this tool for any illegal activity.           #
# Make sure you have permission before Pen Testing any entity.          #
#  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  #
# Thank you for the support.                                            #
# Happy Hacking & Code The Planet                                       #
# www.exeCODEable.com  |  www.AshNoor.me  |  www.KERnano.com            #
#-----------------------------------------------------------------------#


# IMPORTS
from time import sleep
import nmap
import ipaddress
import re


# Pentest Tool Package:
import Pentest_Tools.ptt_main


# Kernano Package:
# Error Handling - The Int Checker
import Kernano_Package.Error_Handler
# The Kernanon Menu & Exit Kernano functions
import Kernano_Package.kp_main

#-----------------------------
# Port Scanner Menu Function
def portScanner_menu():
    print("""
+-+-+-+-+-+-+-+-+-+-+
| Port Scanner Menu |
+-+-+-+-+-+-+-+-+-+-+
---------------------
| a basic nmap scan |
--------------------- """)
    print("""
[1] Scan All Ports.
[2] Scan a Range of Ports.
[3] Back to Pen Testing Tools.
[4] Back to KERnano Menu.  
[5] Exit KERnano.
    """)
    # Getting the user input
    ui_menu_choice = int(input("Enter your Choice: "))

    # Send to The Checker for Error Handling
    # Re-assign the User's input with the value returned from The Checker
    ui_menu_choice = Kernano_Package.Error_Handler.the_int_checker(ui_menu_choice)

    if ui_menu_choice == 1:
        # Scan All Ports
        all_ports_scan()
    elif ui_menu_choice == 2:
        # Scan A Port Range
        port_range_scan()
    elif ui_menu_choice == 3:
        # Go back to Pentest Tool menu
        Pentest_Tools.ptt_main.ptt_menu()
    elif ui_menu_choice == 4:
        # Go back to Kernano's Main Menu
        Kernano_Package.kp_main.kernano_menu()

        # If User Input is rejected by the Error Handler
    elif ui_menu_choice== -1:
        # Go back to Port Scanner menu
        portScanner_menu()
        # If User Input is rejected by the Error Handler
    elif ui_menu_choice == -2:
        # Go back to Port Scanner menu
        portScanner_menu()

    else:
        # Exit KERnano
        Kernano_Package.kp_main.exit_kernano()

# End of the Menu Function
#-----------------------------




#-----------------------------
# Scan all ports function
def all_ports_scan():
    # A list of open ports
    open_ports = []

    # Regular Expression Pattern to recognise IPv4 addresses.
    ip_add_pattern = re.compile("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")

    # The Minimum and Maximum port range
    port_min = 0
    port_max = 65535


    # User Input: Getting the IP address.
    # Validating that it is a correct IP Address.    #
    while True:
        ip_add_entered = input("\nEnter IP Address: ")
        if ip_add_pattern.search(ip_add_entered):
            print(f"{ip_add_entered} is the target. \n")
            break



    # The NMap Scanning starts here
    sleep(2)
    print("\nScanning "+ip_add_entered)
    nm = nmap.PortScanner()
    # We're looping over all of the ports in the specified range.
    for port in range(port_min, port_max + 1):
        try:
            # The result is quite interesting to look at. You may want to inspect the dictionary it returns.
            # It contains what was sent to the command line in addition to the port status we're after.
            # For in nmap for port 80 and ip 10.0.0.2 you'd run: nmap -oX - -p 89 -sV 10.0.0.2
            result = nm.scan(ip_add_entered, str(port))
            # Uncomment following line and look at dictionary
            # print(result)
            # We extract the port status from the returned object
            port_status = (result['scan'][ip_add_entered]['tcp'][port]['state'])
            # Check open state
            if port_status == 'open':
                open_port = (f"Port {port} is {port_status}")
                print(f">>> >>> >>> >>> Port {port} is {port_status}")
                # Append the Open Ports list.
                open_ports.append(open_port)
            else:
                print(f"Port {port} is {port_status}")
        except:
            # We cannot scan some ports and this ensures the program doesn't crash when we try to scan them.
            print(f"Cannot scan port {port}.")

    # Dispaly the open ports
    print("\nAll the Open Ports. \n" + str(open_ports))

    # Go back to the menu when down
    portScanner_menu()

# End of the Scan All Ports Function
#-----------------------------



#-----------------------------
# Scan specific range function
def port_range_scan():
    # A list of open ports
    open_ports = []

    # Regular Expression Pattern to recognise IPv4 addresses.
    ip_add_pattern = re.compile("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")

    # The Minimum and Maximum port range
    port_min = 0
    port_max = 65535

    # Port Range: Lowest Number - Hights Nummer (ex 10-100)
    port_range_pattern = re.compile("([0-9]+)-([0-9]+)")

    while True:
        ip_add_entered = input("\nEnter The IP Addresss: ")
        if ip_add_pattern.search(ip_add_entered):
            print(f"{ip_add_entered} is your target. \n")
            break

    while True:
        # You can scan 0-65535 ports. This scanner is basic and doesn't use multithreading so scanning
        # all the ports is not advised.
        print("The Port Range. Lowest Number - Highest Number (i.e.  60-120)")
        port_range = input("Enter port range: ")
        port_range_valid = port_range_pattern.search(port_range.replace(" ", ""))
        if port_range_valid:
            port_min = int(port_range_valid.group(1))
            port_max = int(port_range_valid.group(2))
            break

    # The nMap Scanner
    nm = nmap.PortScanner()
    # We're looping over all of the ports in the specified range.
    for port in range(port_min, port_max + 1):
        try:
            result = nm.scan(ip_add_entered, str(port), '-Pn -sV')
            # Uncomment following line and look at dictionary
            # print(result)
            # We extract the port status from the returned object
            port_status = (result['scan'][ip_add_entered]['tcp'][port]['state'])
            # check if the status is Open
            if port_status == 'open':
                open_port = (f"Port {port} is {port_status}")
                print(f">>> >>> >>> >>> Port {port} is {port_status}")
                # Append to the Open Ports list
                open_ports.append(open_port)
            else:
                print(f"Port {port} is {port_status}")
        except:
            # We cannot scan some ports and this ensures the program doesn't crash when we try to scan them.
            print(f"Cannot scan port {port}.")

    # Display the open ports
    print("\nAll the Open Ports. \n" + str(open_ports))

    # Go back to the menu when down
    portScanner_menu()

# End of the Scan Port Range Function
#-----------------------------








# - - - - - - - - - - - - - - - -
# Main Guard to call the function
if __name__ == '__main__':
    portScanner_menu() # The Port Scanner Menu